# -*- coding: utf-8 -*-
"""task6_yash.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1awv7Myh6dB8ApRgItngSmHNetaqRBjeY
"""

import numpy as np
from sklearn.neighbors import NearestNeighbors
from numba import cuda
import numba

class MNNCalculator:
    def __init__(self, n_samples=1000, n_features=2, n_neighbors=5):
        self.n_samples = n_samples
        self.n_features = n_features
        self.n_neighbors = n_neighbors
        self.data = None
        self.indices = None
        self.nn_dict = None

    def generate_data(self):
        self.data = np.random.rand(self.n_samples, self.n_features)

    def find_neighbors(self):
        nbrs = NearestNeighbors(n_neighbors=self.n_neighbors, algorithm='auto').fit(self.data)
        _, self.indices = nbrs.kneighbors(self.data)
        self.indices = np.ascontiguousarray(self.indices[:, 1:])
        self.nn_dict = {i: set(self.indices[i]) for i in range(self.n_samples)}

    @staticmethod
    @cuda.jit
    def mnn_kernel(indices_array, output_scores):
        idx = cuda.grid(1)
        if idx < indices_array.shape[0]:
            current_neighbors = indices_array[idx]
            score = 0

            for i in range(current_neighbors.shape[0]):
                neighbor_idx = current_neighbors[i]
                neighbor_neighbors = indices_array[neighbor_idx]

                for j in range(neighbor_neighbors.shape[0]):
                    if neighbor_neighbors[j] == idx:
                        score += 1
                        break

            output_scores[idx] = score

    def calculate_scores(self):
        indices_gpu = cuda.to_device(self.indices)
        mnn_scores = np.zeros(self.n_samples, dtype=np.int32)
        mnn_scores_gpu = cuda.to_device(mnn_scores)

        threads_per_block = 256
        blocks_per_grid = (self.n_samples + threads_per_block - 1)

        self.mnn_kernel[blocks_per_grid, threads_per_block](indices_gpu, mnn_scores_gpu)

        return mnn_scores_gpu.copy_to_host()

if __name__ == "__main__":

    calculator = MNNCalculator()

    calculator.generate_data()

    calculator.find_neighbors()

    mnn_scores = calculator.calculate_scores()

    print("MNN scores for first 5 points:")
    for i in range(5):
        print(f"Point {i}: {mnn_scores[i]}")

